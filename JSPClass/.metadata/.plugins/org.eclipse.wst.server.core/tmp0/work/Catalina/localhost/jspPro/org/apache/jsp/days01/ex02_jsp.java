/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-05-21 05:02:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.days01;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"image/x-icon\"\r\n");
      out.write("	href=\"http://localhost/jspPro/images/SiSt.ico\">\r\n");
      out.write("<title>사용자 등록 폼</title>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"http://localhost/jspPro/resources/cdn-main/example.css\">\r\n");
      out.write("<script src=\"http://localhost/jspPro/resources/cdn-main/example.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("    label, input { display: block; }\r\n");
      out.write("    input.text { margin-bottom: 12px; width: 95%; padding: .4em; }\r\n");
      out.write("    fieldset { padding: 0; border: 0; margin-top: 25px; }\r\n");
      out.write("    h1 { font-size: 1.2em; margin: .6em 0; }\r\n");
      out.write("    .ui-dialog .ui-state-error { padding: .3em; }\r\n");
      out.write("    .validateTips { border: 1px solid transparent; padding: 0.3em; }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<header>\r\n");
      out.write("		<h1 class=\"main\">\r\n");
      out.write("			<a href=\"#\" style=\"position: absolute; top: 30px;\">Park Jiwoong</a>\r\n");
      out.write("		</h1>\r\n");
      out.write("		<ul>\r\n");
      out.write("			<li><a href=\"#\">로그인</a></li>\r\n");
      out.write("			<li><a href=\"#\">회원가입</a></li>\r\n");
      out.write("		</ul>\r\n");
      out.write("	</header>\r\n");
      out.write("	<div>\r\n");
      out.write("		<xmp class=\"code\"> </xmp>\r\n");
      out.write("		<!-- <form action=\"ex02_ok.jsp\" onsubmit=\"validate();\"> -->\r\n");
      out.write("		<form id=\"bookForm\" action=\"ex02_ok.jsp\">\r\n");
      out.write("			책 제목 : <input type=\"text\" id=\"title\" name=\"title\" autofocus=\"autofocus\"><br>\r\n");
      out.write("			저자 : <input type=\"text\" id=\"author\" name=\"author\"><br>\r\n");
      out.write("			나이 : <input type=\"text\" id=\"age\" name=\"age\"><br>\r\n");
      out.write("			<button type=\"button\" id=\"submitBtn\">제출</button>\r\n");
      out.write("			<!--<input type=\"button\" value=\"제출\">-->\r\n");
      out.write("			<!-- <input type=\"submit\"> -->\r\n");
      out.write("			<input type=\"reset\">\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("    \r\n");
      out.write("    <script>\r\n");
      out.write("    ageRegex = /^(?:\\d|[1-9]\\d|1[0-2]\\d|130)$/,\r\n");
      out.write("    title = $( \"#title\" ),\r\n");
      out.write("    author = $( \"#author\" ),\r\n");
      out.write("    age = $( \"#age\" ),\r\n");
      out.write("    allFields = $( [] ).add( title ).add( author ).add( age );\r\n");
      out.write("    \r\n");
      out.write("    function checkLength( o, n, min, max) {\r\n");
      out.write("        if ( o.val().length > 0) {\r\n");
      out.write("          return true;\r\n");
      out.write("        } else {\r\n");
      out.write("        	alert(`${n} 필수 입력!!!`);\r\n");
      out.write("        	o.focus();\r\n");
      out.write("          return false;\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("   \r\n");
      out.write("      function checkRegexp( o, regexp, n ) {\r\n");
      out.write("        if ( !( regexp.test( o.val() ) ) ) {\r\n");
      out.write("         	alert(n);\r\n");
      out.write("         	o.select(); \r\n");
      out.write("          return false;\r\n");
      out.write("        } else {\r\n");
      out.write("          return true;\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      $(\"#submitBtn\").on(\"click\", function(){\r\n");
      out.write("    	  var valid = true;\r\n");
      out.write("     \r\n");
      out.write("          valid = valid && checkLength( title, \"책 제목\");\r\n");
      out.write("          valid = valid && checkLength( author, \"저자\");\r\n");
      out.write("          valid = valid && checkLength( age, \"나이\");\r\n");
      out.write("     \r\n");
      out.write("          valid = valid && checkRegexp( age, ageRegex, \"0~130살 유효!!!\" );\r\n");
      out.write("     \r\n");
      out.write("          if ( valid ) {\r\n");
      out.write("            $(\"form\").submit();\r\n");
      out.write("          }\r\n");
      out.write("          return valid; \r\n");
      out.write("      });\r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("    <script>\r\n");
      out.write("/* 김유미\r\n");
      out.write("$(function() {\r\n");
      out.write("  const tips = $(\".validateTips\");\r\n");
      out.write("\r\n");
      out.write("  function updateTips(msg) {\r\n");
      out.write("    tips.text(msg).addClass(\"ui-state-highlight\");\r\n");
      out.write("    setTimeout(() => {\r\n");
      out.write("      tips.removeClass(\"ui-state-highlight\", 1500);\r\n");
      out.write("    }, 500);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  function checkAge(o, min, max) {\r\n");
      out.write("    const val = o.val().trim();\r\n");
      out.write("    const num = parseInt(val, 10);\r\n");
      out.write("\r\n");
      out.write("    if (!/^\\d+$/.test(val) || num < min || num > max) {\r\n");
      out.write("      o.addClass(\"ui-state-error\");\r\n");
      out.write("      updateTips(\"나이는 \" + min + \"살부터 \" + max + \"살까지 입력 가능합니다.\");\r\n");
      out.write("      return false;\r\n");
      out.write("    } else {\r\n");
      out.write("      return true;\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(\"#submitBtn\").click(function() {\r\n");
      out.write("    $(\".ui-state-error\").removeClass(\"ui-state-error\");\r\n");
      out.write("\r\n");
      out.write("    const isValid = checkAge($(\"#age\"), 1, 130);\r\n");
      out.write("    if (isValid) {\r\n");
      out.write("      $(\"#bookForm\").submit();\r\n");
      out.write("    }\r\n");
      out.write("  });\r\n");
      out.write("});\r\n");
      out.write("*/\r\n");
      out.write("</script> \r\n");
      out.write("<script>\r\n");
      out.write("/* 김현수\r\n");
      out.write("$(function() {\r\n");
      out.write("  $('#submitBtn').on('click', function() {\r\n");
      out.write("    var title = $('#title').val().trim();\r\n");
      out.write("    var author = $('#author').val().trim();\r\n");
      out.write("    var age = $('#age').val().trim();\r\n");
      out.write("    if (title === \"\") {\r\n");
      out.write("      alert('책 제목을 입력하세요.');\r\n");
      out.write("      $('#title').focus();\r\n");
      out.write("      return;\r\n");
      out.write("    }\r\n");
      out.write("    if (author === \"\") {\r\n");
      out.write("      alert('저자를 입력하세요.');\r\n");
      out.write("      $('#author').focus();\r\n");
      out.write("      return;\r\n");
      out.write("    }\r\n");
      out.write("    if (!/^\\d+$/.test(age) || Number(age) < 1 || Number(age) > 130) {\r\n");
      out.write("      alert('나이는 1~130 사이의 숫자만 입력 가능합니다.');\r\n");
      out.write("      $('#age').focus();\r\n");
      out.write("      return;\r\n");
      out.write("    }\r\n");
      out.write("    $(this).closest('form')[0].submit();\r\n");
      out.write("  });\r\n");
      out.write("});\r\n");
      out.write("*/\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("/* 1조 안준호\r\n");
      out.write("function validate() {\r\n");
      out.write("    const titleVal = $(\"#title\").val().trim();\r\n");
      out.write("    const authorVal = $(\"#author\").val().trim();\r\n");
      out.write("    const ageVal = $(\"#age\").val().trim();\r\n");
      out.write("\r\n");
      out.write("    if (titleVal === \"\" || authorVal === \"\") {\r\n");
      out.write("        alert(\"제목또는 저자를 입력하세요.\");\r\n");
      out.write("        event.preventDefault();\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    const ageNum = Number(ageVal);\r\n");
      out.write("    const regex = new RegExp(\"^(100|[1-9][0-9]?)$\");\r\n");
      out.write("    if (!regex.test(ageNum)) {\r\n");
      out.write("        alert(\"나이는 1부터 100까지의 숫자만 입력 가능합니다.\");\r\n");
      out.write("        event.preventDefault();\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("*/\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
